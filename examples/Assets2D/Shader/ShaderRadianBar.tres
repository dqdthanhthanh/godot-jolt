[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://dr1wjejxpmp26"]

[sub_resource type="Shader" id="1"]
code = "shader_type canvas_item;

uniform float value: hint_range(0, 100); // %
uniform float thickness: hint_range(0, 100) = 30.; // % thickness
uniform sampler2D fg: source_color;
uniform sampler2D bg: hint_default_black;
uniform float offset: hint_range(0, 100); // %
uniform float smoothing: hint_range(0, 100) = 5.;

void fragment() {
	vec2 point = UV - vec2(0.5);
	float ang = (1. - atan(point.x, point.y) / PI) * 50. - offset;
	if (ang < 0.)
		ang += 100.;
	float s = smoothing / 1000.;
	float k = PI / 2. / s;
	float r1 = .5 - thickness / 200.;
	float r2 = .5;
	float r = length(point);
	float uy = (r2 - r) / (r2 - r1);
	if (r > r2 || r < r1)
		COLOR.a = 0.;
	else {
		if (ang <= value) 
			COLOR = texture(fg, vec2(ang / 100., uy));
		else
			COLOR = texture(bg, vec2(ang / 100., uy));
		if ((r2 - r) < s)
			COLOR.a = sin((r2 - r) * k);
		if ((r - r1) < s)
			COLOR.a = sin((r - r1) * k);
	}
}"

[sub_resource type="Gradient" id="Gradient_tqo3b"]
interpolation_mode = 1
offsets = PackedFloat32Array(0.570485)
colors = PackedColorArray(1, 1, 1, 0)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_ssee8"]
gradient = SubResource("Gradient_tqo3b")

[resource]
shader = SubResource("1")
shader_parameter/value = 0.0
shader_parameter/thickness = 30.0
shader_parameter/offset = null
shader_parameter/smoothing = 5.0
shader_parameter/fg = SubResource("GradientTexture2D_ssee8")
shader_parameter/bg = SubResource("GradientTexture2D_ssee8")
